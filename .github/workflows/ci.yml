name: CI

on: pull_request

jobs:
  build:
    name: ${{ matrix.task }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [1.60.0]
        task: [check, fmt, clippy, test]
    steps:
      - uses: actions/checkout@master

      - name: Install dependencies (windows only)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static-md
          echo "::set-env OPENSSL_DIR 'C:\Tools\vcpkg\installed\x64-windows-static-md'"
          echo "::set-env OPENSSL_STATIC Yes"
        env:
          VCPKG_ROOT: 'C:\vcpkg'

      - name: Install dependencies (macos only)
        if: matrix.name == 'macos'
        shell: bash
        run: |
          export OPENSSL_STATIC=yes

          # below steps taken from https://gist.github.com/byronmansfield/97d74d8b0d1ea28b48536020dbd6d53e

          # prepare workspace
          mkdir -p ~/openssl-build/ && cd $_

          # download source code
          curl -LO https://www.openssl.org/source/openssl-1.1.1d.tar.gz

          # expand tar
          tar -xzvf openssl-1.1.1d.tar.gz
          cd openssl-1.1.1d

          # configure, make, install
          perl ./Configure --prefix=/usr/local --openssldir=/usr/local/openssl no-ssl3 no-ssl3-method no-zlib darwin64-x86_64-cc enable-ec_nistp_64_gcc_128
          make
          make test
          sudo make install MANDIR=/usr/local/openssl/share/man MANSUFFIX=ssl

          # verify
          openssl version
          which -a openssl

          # clean up
          make clean
          make distclean
          cd ..
          rm -fr openssl-1.1.1d
          rm openssl-1.1.1d.tar.gz

          # set OPENSSL_DIR for cargo build
          export OPENSSL_DIR=/usr/local/openssl

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: ${{ matrix.task }}
        run: make ${{ matrix.task }}
