name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Release binary for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            name: linux-musl
            target_file: target/x86_64-unknown-linux-musl/release/quill
            asset_name: quill-linux-x86_64-musl
            make_target: musl-static
          - os: windows-latest
            name: windows
            target_file: target/release/quill.exe
            asset_name: quill-windows-x86_64.exe
            make_target: release
            rust: 1.66.1
          - os: macos-latest
            name: macos
            target_file: target/release/quill
            asset_name: quill-macos-x86_64
            make_target: release
            rust: 1.66.1
          - os: ubuntu-latest
            name: linux-arm32
            target_file: target/arm-unknown-linux-gnueabihf/release-arm/quill
            asset_name: quill-arm_32
            make_target: unused
            rust: 1.66.1
          - os: ubuntu-latest
            name: linux
            target_file: target/x86_64-unknown-linux-gnu/release/quill
            asset_name: quill-linux-x86_64
            make_target: release
            rust: 1.66.1
    steps:
      - uses: actions/checkout@master

      - if: ${{ contains(matrix.os, 'windows') }}
        shell: bash
        run: echo 'VCPKG_ROOT=C:\vcpkg' >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            ${{ env.VCPKG_ROOT }}
          key: ${{ matrix.os }}-cargo-${{ matrix.rust }}-release-1

      - name: Install dependencies (windows only)
        if: ${{ contains(matrix.os, 'windows')
        shell: bash
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static-md
          echo "OPENSSL_DIR=C:\vcpkg\installed\x64-windows-static-md" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=Yes" >> $GITHUB_ENV

      - name: Install toolchain (Linux static)
        if: ${{ matrix.name == 'linux-musl' }}
        uses: mariodfinity/rust-musl-action@master
        with:
          args: make ${{ matrix.make_target }}
      - name: Install toolchain (ARM)
        if: ${{ matrix.name == 'linux-arm32' }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          target: arm-unknown-linux-gnueabihf
      - name: Install toolchain (Non-linux)
        if: ${{ matrix.name != 'linux-musl' && matrix.name != 'linux-arm32' }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cross build
        if: ${{ matrix.name == 'linux-arm32' }}
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target arm-unknown-linux-gnueabihf --features static-ssl --profile release-arm --locked

      - name: Make
        if: ${{ matrix.name != 'linux-musl' && matrix.name != 'linux-arm32' }}
        run: make ${{ matrix.make_target }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.target_file }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
