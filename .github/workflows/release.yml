name: Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    name: Release binary for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            target_file: target/x86_64-unknown-linux-musl/release/quill
            asset_name: quill-linux-x86_64
            make_target: musl-static
          - os: windows-latest
            name: windows
            target_file: target/release/quill.exe
            asset_name: quill-windows-x86_64.exe
            make_target: release
            rust: 1.60.0
          - os: macos-latest
            name: macos
            target_file: target/release/quill
            asset_name: quill-macos-x86_64
            make_target: release
            rust: 1.60.0
          - os: ubuntu-latest
            name: arm
            target_file: target/arm-unknown-linux-gnueabihf/release/quill
            asset_name: quill-arm_32
            make_target: unused
            rust: 1.60.0
    steps:
      - uses: actions/checkout@master

      - name: Install dependencies (windows only)
        if: matrix.name == 'windows'
        shell: bash
        run: |
          vcpkg integrate install
          vcpkg install openssl:x64-windows-static-md
          echo "::set-env OPENSSL_DIR 'C:\Tools\vcpkg\installed\x64-windows-static-md'"
          echo "::set-env OPENSSL_STATIC Yes"
        env:
          VCPKG_ROOT: 'C:\vcpkg'

      - name: Install dependencies (macOS only)
        if: matrix.name == 'macos'
        shell: bash
        run: |
          # below steps taken from https://gist.github.com/byronmansfield/97d74d8b0d1ea28b48536020dbd6d53e
          
          # prepare workspace
          mkdir -p ~/openssl-build/ && cd $_
          
          # download source code
          curl -LO https://www.openssl.org/source/openssl-1.1.1d.tar.gz
          
          # expand tar
          tar -xzvf openssl-1.1.1d.tar.gz
          cd openssl-1.1.1d
          
          # configure, make, install
          perl ./Configure --prefix=/usr/local --openssldir=/usr/local/openssl no-ssl3 no-ssl3-method no-zlib darwin64-x86_64-cc enable-ec_nistp_64_gcc_128
          make
          sudo make install MANDIR=/usr/local/openssl/share/man MANSUFFIX=ssl
          
          # verify
          openssl version
          which -a openssl

      - name: Link OpenSSL (macOS only)
        if: matrix.name == 'macos-latest'
        run: |
          # see https://github.dev/sfackler/rust-openssl/blob/2e986986784f0136d6666a0ef354ff6bafee63eb/openssl/src/lib.rs#L62-L63
          export OPENSSL_STATIC=1
          export OPENSSL_DIR=/usr/local

      - name: Install toolchain (Linux static)
        if: matrix.name == 'linux'
        uses: mariodfinity/rust-musl-action@master
        with:
          args: make ${{ matrix.make_target }}
      - name: Install toolchain (ARM)
        if: matrix.name == 'arm'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          target: arm-unknown-linux-gnueabihf
      - name: Install toolchain (Non-linux)
        if: matrix.name != 'linux' && matrix.name != 'arm'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cross build
        if: matrix.name == 'arm'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --target arm-unknown-linux-gnueabihf --features static-ssl --release --locked

      - name: Make
        if: matrix.name != 'linux' && matrix.name != 'arm'
        run: make ${{ matrix.make_target }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.target_file }}
          asset_name: ${{ matrix.asset_name }}
          tag: ${{ github.ref }}
